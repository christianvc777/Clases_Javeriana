Facultad de Ingeniería - Departamento de Ingeniería de Sistemas

Programación Avanzada

Segundo Parcial Conjunto – Abril 22 de 2022


Alumno: Cristian Vargas Cuadros   Carrera: Ingeniería de Sistemas


Parte #1 - Conceptos Clases/Objetos


Marque la letra S si la afirmación es Correcta en caso contrario marque la letra N


1. Todas las instancias de la misma clase tendrán el mismo conjunto de valores de sus atributos. [ S ] [ N ]

1. [S] Esta afirmación es correcta, ya que todas las instancias de la misma clase tienen la misma estructura y conjunto de atributos definidos en la clase.

2. La invocación de un método sobre un objeto debe incluir el objeto como parámetro. [ S ] [ N ]

2. [N] Esta afirmación es incorrecta, ya que la invocación de un método sobre un objeto no requiere incluir el objeto como parámetro, ya que el objeto se pasa implícitamente.

3. Un buen encapsulamiento de una clase se logra definiendo sus atributos públicos y sus métodos privados. [ S ] [ N ]

3. [N] Esta afirmación es incorrecta, ya que un buen encapsulamiento de una clase se logra definiendo sus atributos como privados y sus métodos como públicos, para proteger los datos y permitir el acceso controlado a ellos.

4. Una clase A puede tener un atributo que es de tipo A. [ S ] [ N ]

4. [S] Esta afirmación es correcta, ya que una clase puede tener un atributo que sea de su propio tipo.

5. La propiedad this permite referirse a un parámetro recibido en un método constructor [ S ] [ N ]

5. [S] Esta afirmación es correcta, ya que la propiedad this en Java se refiere al objeto actual y se puede usar para referirse a un parámetro recibido en un método constructor.

6. Un método de clase puede usar métodos de otra clase que no sean definidos como métodos de clase [ S ] [ N ]

6. [S] Esta afirmación es correcta, ya que un método de clase puede utilizar métodos de otras clases que no sean definidos como métodos de clase.

7. Las variables de tipo numérico declaradas dentro de un método (por ej: int x;) son inicializadas en 0. [ S ] [ N ]

7. [S] Esta afirmación es correcta, ya que en Java, las variables numéricas no inicializadas dentro de un método se inicializan automáticamente en 0.

8. Cuando se declara PERO no se inicializa un objeto y/o tipo primitivo en Java, por defecto quedan todos apuntando a la misma dirección de memoria conocida como NULL. [ S ] [ N ]

8. [S] Esta afirmación es correcta, ya que en Java, cuando se declara un objeto o tipo primitivo sin inicializarlo, se apuntará a la dirección de memoria NULL.

9. En Java el constructor de una clase se llama automáticamente cuando se encuentra la declaración de un objeto. [ S ] [ N ]

9. [S] Esta afirmación es correcta, ya que el constructor de una clase se llama automáticamente cuando se crea un objeto.


10. En Java, se pueden definir varios constructores en la misma clase. La única restricción es que tales constructores deben tener diferentes parámetros (ya sea en número y/o tipo) para que al ser invocados se sepa a qué constructor se refiere.

10. [S] Esta afirmación es correcta, ya que en Java se pueden definir varios constructores en la misma clase, siempre y cuando tengan diferentes parámetros (en número y/o tipo) para que se pueda distinguir entre ellos al ser invocados.


Parte #2 - Selección Múltiple: Marque una sola respuesta 


11. ¿Cuál de los siguientes enunciados es verdadero sobre los constructores?
a. Es obligatorio que toda clase tenga un constructor explícito.
b. Un constructor permite declarar una variable cuyo tipo corresponde a una clase.
c. Todo constructor debe recibir parámetros para inicializar atributos.
d. Es necesario inicializar todos los atributos en el constructor pues de lo contrario podrían contener valores no válidos
e. Un constructor inicializa el estado de un objeto y permite retornar un objeto de la clase en la cual está definido.

11. Respuesta: D. Es necesario inicializar todos los atributos en el constructor pues de lo contrario podrían contener valores no válidos. 

Justificación: Es importante inicializar todos los atributos de una clase en el constructor, ya que si no se hace esto, estos podrían tener valores por defecto que no tienen sentido en el contexto de la aplicación. Además, no es obligatorio que toda clase tenga un constructor explícito, ya que Java proporciona un constructor por defecto si no se define uno.

12. ¿Cuál de las siguientes declaraciones de constructor son válidas para la clase cuyo nombre es Moneda?
a. public void Moneda()
b. public Moneda()
c. private void Moneda()
d. public Moneda Moneda()
e. private Moneda Moneda()
12. Respuesta: B. public Moneda()

Justificación: La sintaxis correcta para declarar un constructor en Java es usar el mismo nombre que la clase y no tener tipo de retorno. Además, un constructor puede tener cualquier modificador de acceso, aunque si se quiere acceder a él desde fuera de la clase, debe ser público.

13. ¿Cuál de los siguientes enunciados es verdadero acerca de métodos estáticos o métodos de clase?
a. Los métodos estáticos no pueden ser usados sin instanciar primero un objeto.
b. Los métodos estáticos son usados solamente con objetos instanciados.
c. Los métodos estáticos pueden usar miembros (atributos y métodos) de la misma clase, miembros tanto de instancia como de clase.                                                                                                                                                     d. En la invocación de un método estático, el nombre del método está precedido por el nombre de su clase y el operador punto
e. Ninguno de los anteriores.

13. Respuesta: D. En la invocación de un método estático, el nombre del método está precedido por el nombre de su clase y el operador punto.

Justificación: Los métodos estáticos o de clase son aquellos que pertenecen a la clase y no a una instancia de la misma. Pueden ser llamados sin necesidad de crear un objeto de la clase y, por lo tanto, no pueden acceder a variables de instancia (solo a variables estáticas). Para llamar a un método estático, se debe usar el nombre de la clase seguido del operador punto y el nombre del método.

14. Un método es:
a. Una forma de encapsular un grupo de atributos
b. Una forma de hacer la asociación entre dos clases
c. Una propiedad de un atributo, que permite que se mantenga actualizado
d. Una técnica de programación orientada por objetos
e. Ninguna de las anteriores






14. Respuesta: D. Una técnica de programación orientada por objetos.

Justificación: Un método es un bloque de código que se usa para realizar una acción específica en un objeto o en una clase en particular. En la programación orientada a objetos, los métodos son una forma de encapsular el comportamiento de los objetos.

15. ¿Cuál de las siguientes sentencias es falsa?:
a. Cada método define un comportamiento de los objetos de una clase.
b. Un método puede aceptar parámetros.
c. Los métodos pueden invocar otros métodos en otros objetos
d. Un método puede declarar atributos
e. Un método contiene instrucciones para ser ejecutadas.

15. Respuesta: D. Un método puede declarar atributos.

Justificación: Un método es un bloque de código que se usa para realizar una acción específica en un objeto o en una clase en particular. Un método puede aceptar parámetros, invocar otros métodos en otros objetos, definir comportamiento de los objetos, y contiene instrucciones para ser ejecutadas. Un método no puede declarar atributos, solo puede acceder a ellos.

16. El operador new en java:
a. Asigna memoria
b. Es usado para crear un objeto de una clase
c. Asocia un objeto con una variable que lo manejará
d. a. y b. y c.
e. Ninguna de las anteriores

16. Respuesta: D. Asigna memoria y es usado para crear un objeto de una clase y asocia un objeto con una variable que lo manejará.

Justificación: El operador new se usa para crear un objeto de una clase en Java. Al hacer esto, el operador asigna memoria para el objeto y lo inicializa. El objeto creado se puede asociar con una variable usando el operador de asignación (=).



17. Suponga que s1 y s2 son dos String. ¿Cuál de las siguientes expresiones es incorrecta?
a. String s = new String("new string");
b. s1 + s2;
c. String s3 = s1.concat(s2);
d. s1 >= s2
e. int i = s1.length();

17. Respuesta: D. s1 >= s2

Justificación: La comparación de cadenas en Java se hace usando los métodos equals() o compareTo(). La expresión s1 >= s2 no tiene sentido en Java ya que no se puede comparar cadenas de esta manera.

18. Suponga que vect es un arreglo de objetos Estudiante. ¿Cuál de las siguientes expresiones es correcta?
a. Estudiante vect[]=new Estudiantes(20);
b. Estudiante vect[]=new Estudiante[20];
c. Estudiante vect(20);
d. Estudiante vect[20];
e. Estudiante[20] vect;

18. Respuesta: B. Estudiante vect[]=new Estudiante[20];

Justificación: La sintaxis correcta para crear un arreglo de objetos en Java es declarar un arreglo de la clase y luego usar el operador new para crear el arreglo y especificar su tamaño. La sintaxis correcta para crear un arreglo de 20 objetos de la clase Estudiante es: Estudiante vect[]=new Estudiante[20];

19. Un atributo que es compartido por todos los objetos de la clase es definido usando ________.
a. final
b. private
c. protected
d. public
e. static




19. Respuesta: E. Static.

Justificación: Un atributo compartido por todos los objetos de la clase se define como "static", lo que significa que la variable se asocia con la clase en lugar de con objetos individuales de la clase. Los atributos "final" pueden ser constantes, pero no necesariamente son compartidos por todos los objetos de la clase.

20. La sintaxis correcta que declara una CONSTANTE llamada SALES_TAX es:
a. double SALES_TAX = 7.50;
b. public double SALES_TAX = 7.50;
c. public static double SALES_TAX = 7.50;
d. public static final double SALES_TAX = 7.50;
e. Ninguna de los anteriores

20. Respuesta: D. public static final double SALES_TAX = 7.50;

Justificación: Para declarar una constante en Java, se utiliza la palabra clave "final" para indicar que el valor de la variable no puede cambiar después de que se le asigne un valor inicial. Además, para hacer que la constante sea accesible desde fuera de la clase, se utiliza la palabra clave "public" y para hacerla compartida por todos los objetos de la clase se utiliza "static". Por lo tanto, la opción d cumple con todos estos requisitos.


Parte Práctica 

 
Definir la clase Motor  

Todo motor debe tener atributos como Cilindrada (de tipo entero), VelocidadMax (de tipo double), CaballosFuerza (de tipo entero) y TipoCombustible (de tipo string). Estos atributos deben ser privados. El constructor debe recibir los parámetros cuando se instancie un objeto. La clase debe tener un método público, llamado imprimir() que permita conocer las características del motor. Ejemplo de datos de un motor (Cilindrada: 1400, VelocidadMax: 240, CaballosFuerza: 4, TipoCombustible: Diesel) 
 


Definir la clase Vehículo

Todo vehículo debe tener atributos como Placa (de tipo string), Marca (de tipo string) y Motor (de tipo Motor). Debe tener dos (2) constructores sobrecargados. El primer constructor recibe placa y marca, el motor debe instanciarse con datos por defecto. El otro constructor recibe placa, marca, cilindrada, velocidadmax, caballosfuerza y tipocombustible. La clase debe tener un método público, llamado imprimir() que permita conocer las características del vehículo y su motor. 

3. La clase Vehículo debe tener métodos Get y Set para sus atributos (placa, marca, cilindrada, velocidadmax, caballosfuerza, tipocombustible), de manera que puedan ser modificados y leídos de forma individual. Estos métodos se deben extender para la clase Motor para que también permita modificar sus atributos (cilindrada, velocidadmax, caballosfuerza y combustible). 
 
4. En la clase Vehículo se debe contar con un método estático para comparar los motores de 2 objetos de tipo vehiculo. La comparación debe permitir comparar la cilindrada de los motores, de manera que indique, cuál es el mejor vehículo y en caso de que sean iguales, mostrar el mensaje respectivo. Este método estático recibe como parámetros 2 objetos de tipo vehículo para poder compararlos. 
El programa debe permitir instanciar por lo menos 2 objetos de tipo vehículo para utilizar sus dos constructores y probar los numerales 1 al 4. 
 

 
Tiempo máximo: 2 horas 



SOLUCIÓN - PARTE PRÁCTICA (PARCIAL #2)


https://github.com/christianvc777/Programacion_Avanzada/blob/main/Carro.java


CÓDIGO DE LA SOLUCIÓN - CRISTIAN VARGAS CUADROS

/*************************************************
  Programación Avanzada - Java
  Ejercicio Final - Parcial #2
  Alumno: Cristian Vargas Cuadros
************************************************/

//Primer Fichero Carro.java

//Nota: Se compila solo la clase principal (Carro) en la Shell

public class Carro {
    public static void main(String[] args) {
        Vehiculo vehiculo1 = new Vehiculo("ABC123", "Toyota", 1400, 240, 4, "Diesel");
        Vehiculo vehiculo2 = new Vehiculo("DEF456", "Honda", 1600, 250, 5, "Gasolina");

        vehiculo1.imprimir();
        vehiculo2.imprimir();

        Vehiculo.compararMotores(vehiculo1, vehiculo2);
    }
}

//Segundo Fichero Motor.java

public class Motor {
    private int cilindrada;
    private double velocidadMax;
    private int caballosFuerza;
    private String tipoCombustible;
    public Motor(int cilindrada, double velocidadMax, int caballosFuerza, String tipoCombustible) {
        this.cilindrada = cilindrada;
        this.velocidadMax = velocidadMax;
        this.caballosFuerza = caballosFuerza;
        this.tipoCombustible = tipoCombustible;
    }
    
    public void imprimir() {
        System.out.println("Cilindrada: " + cilindrada);
        System.out.println("Velocidad Maxima: " + velocidadMax);
        System.out.println("Caballos de Fuerza: " + caballosFuerza);
        System.out.println("Tipo de Combustible: " + tipoCombustible);
    }
    
    public void setCilindrada(int cilindrada) {
        this.cilindrada = cilindrada;
    }
    
    public void setVelocidadMax(double velocidadMax) {
        this.velocidadMax = velocidadMax;
    }
    
    public void setCaballosFuerza(int caballosFuerza) {
        this.caballosFuerza = caballosFuerza;
    }
    
    public void setTipoCombustible(String tipoCombustible) {
        this.tipoCombustible = tipoCombustible;
    }
    


    public int getCilindrada() {
        return cilindrada;
    }
    
    public double getVelocidadMax() {
        return velocidadMax;
    }
    
    public int getCaballosFuerza() {
        return caballosFuerza;
    }
    
    public String getTipoCombustible() {
        return tipoCombustible;
    }
}

//Tercer Fichero Vehiculo.java 

public class Vehiculo {
    private String placa;
    private String marca;
    private Motor motor;
    
    public Vehiculo(String placa, String marca) {
        this.placa = placa;
        this.marca = marca;
        this.motor = new Motor(0, 0.0, 0, "");
    }
    
    public Vehiculo(String placa, String marca, int cilindrada, double velocidadMax, int caballosFuerza, String tipoCombustible) {

        this.placa = placa;
        this.marca = marca;
        this.motor = new Motor(cilindrada, velocidadMax, caballosFuerza, tipoCombustible);
    }
    
    public void imprimir() {
        System.out.println("Placa: " + placa);
        System.out.println("Marca: " + marca);
        motor.imprimir();
    }
    
    public void setPlaca(String placa) {
        this.placa = placa;
    }
    
    public void setMarca(String marca) {
        this.marca = marca;
    }
    
    public String getPlaca() {
        return placa;
    }
    
    public String getMarca() {
        return marca;
    }
    
    public Motor getMotor() {
        return motor;
    }
    


// Método estático para comparar los motores de dos vehículos

    public static void compararMotores(Vehiculo vehiculo1, Vehiculo vehiculo2) {
        if (vehiculo1.getMotor().getCilindrada() > vehiculo2.getMotor().getCilindrada()) {
            System.out.println("El vehículo con placa " + vehiculo1.getPlaca() + " tiene un motor mejor que el vehículo con placa " + vehiculo2.getPlaca());
        } else if (vehiculo2.getMotor().getCilindrada() > vehiculo1.getMotor().getCilindrada()) {
            System.out.println("El vehículo con placa " + vehiculo2.getPlaca() + " tiene un motor mejor que el vehículo con placa " + vehiculo1.getPlaca());
        } else {
            System.out.println("Los vehículos con placas " + vehiculo1.getPlaca() + " y " + vehiculo2.getPlaca() + " tienen motores iguales");
        }
    }
}

//Author: Cristian Vargas Cuadros






FIN DEL PARCIAL #2




