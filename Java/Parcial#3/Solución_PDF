Facultad de Ingeniería - Departamento de Ingeniería de Sistemas

Programación Avanzada

Tercer Parcial Conjunto – Abril 22 de 2022

Alumno: Cristian Vargas Cuadros   Carrera: Ingeniería de Sistemas


Ejercicio Modelo Tercer Parcial: Programación Avanzada
John Corredor, PhD
✨Magic ✨
Características del MODELO
Representa un modelo práctico del 3er parcial
Se recomienda hacer el ejercicio
Propuesta MODELO TERCER PARCIAL
a. En el contexto de la construcción de un modelo de aprendizaje automático, desarrolle una clase abstracta llamada Modelo que tiene como atributos el nombre (String) y el número de parámetros (int). Debe tener un constructor que permita inicializar sus atributos y un método abstracto llamado entrenar de tipo void.
b. Diseñe una clase llamada ModeloLineal hija de Modelo que tiene como atributos adicionales el coeficiente de correlación (double) y el error cuadrático medio (double). Debe tener un método constructor que permita inicializar sus atributos y los del padre. Sobreescribe el método entrenar el cual muestra por pantalla el proceso de entrenamiento de un modelo lineal de esta manera:
Entrenando modelo lineal: <nombre>
Número de parámetros: <parámetros>
Coeficiente de correlación inicial: <coeficiente>
Error cuadrático medio inicial: <error>
Entrenamiento completado.
c. Diseñe una clase llamada ModeloArbolDecision hija de Modelo que tiene como atributos adicionales la profundidad del árbol (int) y la cantidad de nodos hoja (int). La clase ModeloArbolDecision debe tener también un constructor que permite inicializar sus atributos y los del padre. Sobreescribe el método entrenar para que muestre por pantalla la información del entrenamiento del modelo de árbol de decisión así:
Entrenando modelo de árbol de decisión: <nombre>
Número de parámetros: <parámetros>
Profundidad del árbol: <profundidad>
Número de nodos hoja: <nodos hoja>
Entrenamiento completado.
d. En el main de una aplicación en consola construya una lista de Modelos (objetos de tipo ModeloLineal y ModeloArbolDecision, en la misma lista puede haber objetos de los dos tipos). Construya por lo menos un objeto de cada tipo. Y en el mismo método del main desarrolle un ciclo que muestre por pantalla el proceso de entrenamiento de cada modelo usando el método entrenar de cada clase. En este punto debe utilizar polimorfismo para la lista de Modelos y para entrenar los modelos.
e. Desarrolle una clase llamada Validador que tenga un método llamado validarModelo. Este método debe recibir un objeto de la clase Modelo, ejecutar el método entrenar del modelo, y luego imprimir un mensaje que indique si el modelo es válido o no. Un modelo se considera válido si cumple las siguientes condiciones:
Para los modelos lineales, el coeficiente de correlación debe ser superior a 0.8 y el error cuadrático medio debe ser inferior a 0.2.
Para los modelos de árbol de decisión, la profundidad del árbol debe ser inferior a 10 y el número de nodos hoja debe ser superior a 5.
El método debe imprimir el siguiente mensaje si el modelo es válido:
El modelo <nombre> ha pasado la validación.
Y el siguiente mensaje si el modelo no es válido:
El modelo <nombre> no ha pasado la validación.
Salida
Entrenando modelo lineal: Modelo Lineal 1
Número de parámetros: 2
Coeficiente de correlación inicial: 0.85
Error cuadrático medio inicial: 0.1
Entrenamiento completado.
El modelo Modelo Lineal 1 ha pasado la validación.
Entrenando modelo de árbol de decisión: Modelo Árbol Decisión 1
Número de parámetros: 3
Profundidad del árbol: 9
Número de nodos hoja: 8
Entrenamiento completado.
El modelo Modelo Árbol Decisión 1 ha pasado la validación.
Entrenando modelo lineal: Modelo Lineal 2
Número de parámetros: 2
Coeficiente de correlación inicial: 0.7
Error cuadrático medio inicial: 0.3
Entrenamiento completado.
El modelo Modelo Lineal 2 no ha pasado la validación.
Entrenando modelo de árbol de decisión: Modelo Árbol Decisión 2
Número de parámetros: 3
Profundidad del árbol: 11
Número de nodos hoja: 4
Entrenamiento completado.
El modelo Modelo Árbol Decisión 2 no ha pasado la validación.


Link de la Solución - Repositorio (GitHub): https://github.com/christianvc777/Programacion_Avanzada/blob/main/Java/Parcial%233/Main.java


/*******************************************************************************    
  Parcial #3 - Programación Avanzada
  Objetivo: Modelos de Machine Learning
  Teoría: Clases Abstractas y Overriding
  Programador: Cristian Vargas Cuadros
*******************************************************************************/

// Clase abstracta Modelo
abstract class Modelo {
    protected String nombre;
    protected int parametros;
    
//Constructor de Modelo
    public Modelo(String nombre, int parametros) {
        this.nombre = nombre;
        this.parametros = parametros;
    }

// Getters para nombre y parametros
    public String getNombre() {
        return nombre;
    }

    public int getParametros() {
        return parametros;
    }
    
//Metodo abstracto entrenar (poliformismo)
    public abstract void entrenar();
}

// Clase ModeloLineal que hereda de Modelo
class ModeloLineal extends Modelo {
    public double coeficienteCorrelacion;
    public double errorCuadraticoMedio;
    
//Constructor de Modelo
    public ModeloLineal(String nombre, int parametros, double coeficienteCorrelacion, double errorCuadraticoMedio) {
        super(nombre, parametros);
        this.coeficienteCorrelacion = coeficienteCorrelacion;
        this.errorCuadraticoMedio = errorCuadraticoMedio;
    }

// Getters para coeficienteCorrelacion y errorCuadraticoMedio
    public double getCoeficienteCorrelacion() {
        return coeficienteCorrelacion;
    }

    public double getErrorCuadraticoMedio() {
        return errorCuadraticoMedio;
    }

//Sobreescribir el metodo entrenar en ModeloLineal
    @Override
    public void entrenar() {
        System.out.println("Entrenando modelo lineal: " + nombre);
        System.out.println("Número de parámetros: " + parametros);
        System.out.println("Coeficiente de correlación inicial: " + coeficienteCorrelacion);
        System.out.println("Error cuadrático medio inicial: " + errorCuadraticoMedio);
        System.out.println("Entrenamiento completado.");
    }
}

// Clase ModeloArbolDecision que hereda de Modelo
class ModeloArbolDecision extends Modelo {
    public int profundidadArbol;
    public int nodosHoja;

//Constructor de ModeloArbolDecision
    public ModeloArbolDecision(String nombre, int parametros, int profundidadArbol, int nodosHoja) {
        super(nombre, parametros);
        this.profundidadArbol = profundidadArbol;
        this.nodosHoja = nodosHoja;
    }

// Getters para profundidadArbol y nodosHoja
    public int getProfundidadArbol() {
        return profundidadArbol;
    }

    public int getNodosHoja() {
        return nodosHoja;
    }

//Sobreescribir el metodo entrenar ModeloArbolDecision 
    @Override
    public void entrenar() {
        System.out.println("Entrenando modelo de árbol de decisión: " + nombre);
        System.out.println("Número de parámetros: " + parametros);
        System.out.println("Profundidad del árbol: " + profundidadArbol);
        System.out.println("Número de nodos hoja: " + nodosHoja);
        System.out.println("Entrenamiento completado.");
    }
}

// Clase Validador
class Validador {
    
//Metodo estaticos validarModelo
    public static void validarModelo(Modelo modelo) {
        
//Mostrar info del metodo entrenar
        modelo.entrenar();

//Validacion de modelo si es una instancia ModeloLineal
        if (modelo instanceof ModeloLineal) {
            ModeloLineal modeloLineal = (ModeloLineal) modelo;
            if (modeloLineal.coeficienteCorrelacion > 0.8 && modeloLineal.errorCuadraticoMedio < 0.2) {
                System.out.println("El modelo " + modelo.nombre + " ha pasado la validación.");
            } else {
                System.out.println("El modelo " + modelo.nombre + " no ha pasado la validación.");
            }
            
//Validacion de modelo si es una instancia ModeloArbolDecision
        } else if (modelo instanceof ModeloArbolDecision) {
            ModeloArbolDecision modeloArbolDecision = (ModeloArbolDecision) modelo;
            if (modeloArbolDecision.profundidadArbol < 10 && modeloArbolDecision.nodosHoja > 5) {
                System.out.println("El modelo " + modelo.nombre + " ha pasado la validación.");
            } else {
                System.out.println("El modelo " + modelo.nombre + " no ha pasado la validación.");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        
//Crear instancias de los modelos ModeloLineal y ModeloArbolDecision
        ModeloLineal modeloLineal1 = new ModeloLineal("Modelo Lineal 1", 2, 0.85, 0.1);
        ModeloArbolDecision modeloArbolDecision1 = new ModeloArbolDecision("Modelo Árbol Decisión 1", 3, 9, 8);
        ModeloLineal modeloLineal2 = new ModeloLineal("Modelo Lineal 2", 2, 0.7, 0.3);
        ModeloArbolDecision modeloArbolDecision2 = new ModeloArbolDecision("Modelo Árbol Decisión 2", 3, 11, 4);

//Validacion de los modelos con el metodo validarModelo
        Validador.validarModelo(modeloLineal1);
        Validador.validarModelo(modeloArbolDecision1);
        Validador.validarModelo(modeloLineal2);
        Validador.validarModelo(modeloArbolDecision2);
        System.out.println("Author: Cristian Vargas Cuadros");

    }
   
}



